name: Unit Tests

on:
  push:
    branches: [ master, develop, main ]
  pull_request:
    branches: [ master, develop, main ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: testdb
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      NODE_ENV: test
      # Test database connection for CI environment
      MONGODB_URI: mongodb://root:password@localhost:27017/testdb?authSource=admin
      # Test JWT configuration - not used in production
      JWT_SECRET: test-jwt-secret-key-for-testing
      JWT_EXPIRES_IN: 1h

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm ls --depth=0

      - name: Wait for MongoDB
        run: |
          timeout 60s bash -c 'until nc -z localhost 27017; do sleep 1; done'
          echo "MongoDB is ready"

      - name: Lint code
        run: npm run lint

      - name: Run unit tests
        run: |
          npm run test -- --ci --coverage --watchAll=false --testTimeout=30000
        env:
          NODE_OPTIONS: --max_old_space_size=4096

      - name: Run E2E tests
        run: |
          npm run test:e2e -- --ci --watchAll=false --testTimeout=60000
        env:
          NODE_OPTIONS: --max_old_space_size=4096

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
          retention-days: 7

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Check if coverage file exists
            const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const total = coverage.total;
              
              const comment = `## 🧪 Test Results
              
              | Metric | Coverage |
              |--------|----------|
              | Lines | ${total.lines.pct}% |
              | Functions | ${total.functions.pct}% |
              | Branches | ${total.branches.pct}% |
              | Statements | ${total.statements.pct}% |
              
              **Overall Coverage: ${total.lines.pct}%**
              
              ${total.lines.pct >= 80 ? '✅ Great coverage!' : '⚠️ Consider adding more tests to improve coverage.'}`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          npx audit-ci --moderate

      - name: Check for vulnerabilities
        run: |
          if npm audit --audit-level=high --json | jq '.vulnerabilities | length' | grep -q '^0$'; then
            echo "✅ No high-severity vulnerabilities found"
          else
            echo "❌ High-severity vulnerabilities detected"
            npm audit --audit-level=high
            exit 1
          fi

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          npm run build
          ls -la dist/

      - name: Check build artifacts
        run: |
          if [ ! -f "dist/main.js" ]; then
            echo "❌ Build failed - main.js not found"
            exit 1
          fi
          echo "✅ Build successful"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, security-audit, build-test]
    if: always()
    
    steps:
      - name: Test Summary
        run: |
          echo "## 📊 Test Summary"
          echo "- Unit Tests: ${{ needs.unit-tests.result }}"
          echo "- Security Audit: ${{ needs.security-audit.result }}"
          echo "- Build Test: ${{ needs.build-test.result }}"
          
          if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.security-audit.result }}" == "success" && "${{ needs.build-test.result }}" == "success" ]]; then
            echo "✅ All tests passed!"
            exit 0
          else
            echo "❌ Some tests failed"
            exit 1
          fi
